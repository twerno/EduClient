<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:passwordValidator="pl.twerno.eduClient.supportClasses.passwordValidator.*" 
		 width="530" height="380">

	<fx:Script>
		<![CDATA[
			import mx.controls.Alert;
			import mx.events.ValidationResultEvent;
			import mx.rpc.AsyncToken;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;

			import net.twerno.eduClient.RO.user.Account;
			import net.twerno.eduClient.consts.Const;
			import net.twerno.eduClient.responders.FunctResponder;
			import net.twerno.eduClient.responders.RpcResponder;
			import net.twerno.eduClient.rpc.services.UserService;
			import net.twerno.eduClient.rpc.tokens.RpcToken;

			import pl.twerno.commLib.Images;
			import pl.twerno.eduClient.common.Colors;
			import pl.twerno.eduClient.common.Env.Env;
			import pl.twerno.eduClient.common.Env.RPCErrorHandler;

			private var env:Env = Env.get;

			protected function loginBtn_clickHandler(event:MouseEvent):void {
				if ((passwordValidator.validate().type == ValidationResultEvent.INVALID) || 
				   (loginValidator.validate().type == ValidationResultEvent.INVALID)) {
					return;
				}

				var token:RpcToken = env.eduClient.userService.login(login.text, password.text);
				token.addResponder(new RpcResponder(loggedInResult, loggedInFault));
			}

			protected function loggedInResult(data:ResultEvent, token:RpcToken):void {
				var token:RpcToken = env.eduClient.userService.getLoggedUser();
				token.addResponder(new RpcResponder(getAccountResult, getAccountFault));
			}

			protected function loggedInFault(info:FaultEvent, token:RpcToken):void {
				currentState = "incorrectLogin";
				RPCErrorHandler.handleError(info);
			}

			protected function getAccountResult(data:ResultEvent, token:RpcToken):void {
				currentState = "MainState";
				env.login(data.result as Account);
			}

			protected function getAccountFault(info:FaultEvent, token:RpcToken):void {
				RPCErrorHandler.handleError(info, true);
			}

			protected function registerBtn_clickHandler(event:MouseEvent):void {
				currentState = "MainState";

				if ((newLoginValidator.validate().type         == ValidationResultEvent.INVALID) ||
					(newPasswordValidator.validate().type      == ValidationResultEvent.INVALID) || 
					(newPassword2Validator.validate().type     == ValidationResultEvent.INVALID) ||
					(newPasswordMatchValidator.validate().type == ValidationResultEvent.INVALID)) {
					return;
				}

				var token:RpcToken = env.eduClient.userService.registerUser(
					newLogin.text,
					newPassword.text,
					tnUczen.selected,
					tnNauczyciel.selected);
				token.addResponder(new RpcResponder(registerResult, registerFault));
			}
			
			protected function registerResult(data:ResultEvent, token:RpcToken):void {
				var token:RpcToken = env.eduClient.userService.login(newLogin.text, newPassword.text);
				token.addResponder(new RpcResponder(loggedInResult, loggedInFault));
			}
			
			protected function registerFault(info:FaultEvent, token:RpcToken):void {
				RPCErrorHandler.handleError(info, true);
			}

			protected function button1_clickHandler(event:MouseEvent):void {
				var token:RpcToken = env.eduClient.userService.login('admin', 'admin');
				token.addResponder(new RpcResponder(loggedInResult, loggedInFault));
			}

			protected function button2_clickHandler(event:MouseEvent):void {
				var token:RpcToken = env.eduClient.userService.login('uczen', 'uczen');
				token.addResponder(new RpcResponder(loggedInResult, loggedInFault));
			}

			protected function button3_clickHandler(event:MouseEvent):void {
				var token:RpcToken = env.eduClient.userService.login('nauczyciel', 'nauczyciel');
				token.addResponder(new RpcResponder(loggedInResult, loggedInFault));
			}

		]]>
	</fx:Script>	
	<s:states>
		<s:State name="MainState"/>
		<s:State name="incorrectLogin"/>
	</s:states>
	
	<fx:Declarations>
		<fx:String id="tooShortLogin">Login musi mieć przynajmniej 3 znaki!</fx:String>
		<fx:String id="tooLongLogin">Login nie może być dłuższy niż 30 znaków!</fx:String>
		<fx:String id="tooShortPass">Hasło musi mieć przynajmniej 3 znaki!</fx:String>
		<fx:String id="tooLongPass">Hasło nie może być dłuższe niż 30 znaków!</fx:String>
		<fx:String id="poleWymagane">To pole jest wymagane!</fx:String>
		
		<s:RadioButtonGroup id="radiogroup1"/>
		<mx:StringValidator source="{login}" property="text" id="loginValidator"
							minLength="3" maxLength="30"
							tooShortError="{tooShortLogin}" tooLongError="{tooLongLogin}"
							required="true" requiredFieldError="{poleWymagane}"/>
		<mx:StringValidator source="{password}" property="text" id="passwordValidator"
							minLength="3" maxLength="30"
							tooShortError="{tooShortPass}" tooLongError="{tooLongPass}"
							required="true" requiredFieldError="{poleWymagane}"/>
		
		<mx:StringValidator source="{newLogin}" property="text" id="newLoginValidator"
							minLength="3" maxLength="30"
							tooShortError="{tooShortLogin}" tooLongError="{tooLongLogin}"
							required="true" requiredFieldError="{poleWymagane}"/>
		<mx:StringValidator source="{newPassword}" property="text" id="newPasswordValidator"
							minLength="3" maxLength="30"
							tooShortError="{tooShortPass}" tooLongError="{tooLongPass}"
							required="true" requiredFieldError="{poleWymagane}"/>
		<mx:StringValidator source="{newPassword2}" property="text" id="newPassword2Validator"
							minLength="3" maxLength="30"
							tooShortError="{tooShortPass}" tooLongError="{tooLongPass}"
							required="true" requiredFieldError="{poleWymagane}"/>
		<passwordValidator:PasswordValidator 
			source="{newPassword}" property="text" id="newPasswordMatchValidator"
			confirmationSource="{newPassword2}" confirmationProperty="text"/>
	</fx:Declarations>

	<s:Panel height="245" title="Zarejestruj się" styleName="GreenStyle" width="250" x="10" y="10">
		<mx:Image bottom="-1" left="0" right="0" source="@Embed(source='assets/grass.svg')" 
				  alpha="0.3" height="44" maintainAspectRatio="false"/>
		<mx:Form height="164" top="0" left="0" right="0">
			<mx:FormItem label="Nazwa" width="100%">
				<s:TextInput id="newLogin" styleName="OrangeFocus" width="100%"/>
			</mx:FormItem>
			<mx:FormItem label="Hasło" width="100%" textAlign="left">
				<s:TextInput id="newPassword" styleName="OrangeFocus" width="100%"/>
			</mx:FormItem>
			<mx:FormItem label="Powtórz hasło" width="100%">
				<s:TextInput id="newPassword2" styleName="OrangeFocus" width="100%"/>
			</mx:FormItem>
			<mx:FormItem width="100%">
				<s:RadioButton label="Uczeń"      groupName="radiogroup1" selected="true" id="tnUczen"/>
				<s:RadioButton label="Nauczyciel" groupName="radiogroup1" selected="false" id="tnNauczyciel"/>
			</mx:FormItem>
		</mx:Form>
		<s:Button label="Utwórz konto" id="registerBtn" y="149" horizontalCenter="0"
				  click="registerBtn_clickHandler(event)" 
				  skinClass="pl.twerno.commLib.skins.button.Key_addButtonSkin"/>
	</s:Panel>
	
	<s:Panel title="Zaloguj się" styleName="GreenStyle" width="250" height="245" x="270" y="10">
		<mx:Image bottom="-1" left="0" right="0" source="@Embed(source='assets/grass.svg')" 
				  alpha="0.3" height="44" maintainAspectRatio="false"/>
		<mx:Form height="113" top="0" left="0" right="0" height.incorrectLogin="145" top.incorrectLogin="0" left.incorrectLogin="0" right.incorrectLogin="0">
			<mx:FormItem label="Nazwa" width="100%">
				<s:TextInput id="login" styleName="OrangeFocus" width="100%"/>
			</mx:FormItem>
			<mx:FormItem label="Hasło" width="100%">
				<s:TextInput id="password" styleName="OrangeFocus" width="100%"/>
			</mx:FormItem>
			<mx:FormItem label="Powtórz hasło" width="100%" visible="false"/>
		</mx:Form>
		<s:Group width="100%" height="22" includeIn="incorrectLogin" x="0" y="70">
			<s:layout>
				<s:HorizontalLayout verticalAlign="middle" paddingLeft="45"/>
			</s:layout>
			<mx:Image includeIn="incorrectLogin" x="31" y="18" width="16" height="16" source="{Images.get().exclamationImg}"/>
			<s:Label text="Błędna nazwa lub hasło!" includeIn="incorrectLogin" paddingTop="2" color="#E50C0C"/>
		</s:Group>
		<s:Button label="Zaloguj się" id="loginBtn" 
				  click="loginBtn_clickHandler(event)"
				  skinClass="pl.twerno.commLib.skins.button.KeyButtonSkin" y="75" horizontalCenter="0" y.incorrectLogin="97"/>
	</s:Panel>	
	
	<s:Button label="Loguj jako uczen"      click="button2_clickHandler(event)" y="311" chromeColor="#FFEE8C" width="200" skinClass="pl.twerno.commLib.skins.button.KeyButtonSkin" horizontalCenter="0"/>
	<s:Button label="Loguj jako nauczyciel" click="button3_clickHandler(event)" y="340" chromeColor="#FFEE8C" width="200" skinClass="pl.twerno.commLib.skins.button.KeyButtonSkin" horizontalCenter="0"/>
	<s:Button label="Loguj jako admin"      click="button1_clickHandler(event)" y="282" chromeColor="#FFEE8C" width="200" skinClass="pl.twerno.commLib.skins.button.KeyButtonSkin" horizontalCenter="0"/>
</s:Group>
