<?xml version="1.0" encoding="utf-8"?>
<panels:AbstractPanel xmlns:fx="http://ns.adobe.com/mxml/2009" 
					  xmlns:s="library://ns.adobe.com/flex/spark" 
					  xmlns:mx="library://ns.adobe.com/flex/mx" 
					  xmlns:panels="pl.twerno.eduClient.panels.*" 
					  width="800" height="600">
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CollectionEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			
			import net.twerno.eduClient.RO.zadanie.Zadanie;
			import net.twerno.eduClient.RO.zadanie.Zadanie_ZbiorPytan;
			import net.twerno.eduClient.consts.Const;
			import net.twerno.eduClient.responders.RpcResponder;
			import net.twerno.eduClient.rpc.tokens.RpcToken;
			import net.twerno.eduClient.rpc.tokens.ZadanieToken;
			
			import pl.twerno.commLib.Images;
			import pl.twerno.commLib.konwerter.KonwerterItem;
			
			import spark.events.IndexChangeEvent;

			protected function dodajZadanie_clickHandler(event:MouseEvent):void {
				env.nauczycielEnv.wybraneZadanie = new Zadanie();
				wczytajZbioryPytan();
				initControls();
			}
			
			public override function init():void {
				env.nauczycielEnv.wybraneZadanie = null;
				env.nauczycielEnv.dostepneZbioryPytanTypu.removeAll();
				var token:RpcToken = env.eduClient.zadanieService.dajMojeZadania();
				token.newResponder(dajMojeZadania_Handler, env.FaultHandler);
			}
			
			public function dajMojeZadania_Handler(event:ResultEvent, token:RpcToken):void {
				env.nauczycielEnv.zadaniaList = event.result as ArrayCollection;
				initControls();
			}

			private function initControls():void {
				zadaniePanel.enabled = env.nauczycielEnv.wybraneZadanie != null;
				zasadyPanel.enabled  = env.nauczycielEnv.wybraneZadanie != null; 

				if (zadaniePanel.enabled) {
					typZadania.selectedItem 
						= Const.TYP_ZADANIA_KONWERTER.itemByVal(
							env.nauczycielEnv.wybraneZadanie.typZadania);
					wyborPytan.selectedItem
						= Const.TYP_WYBORU_KONWERTER.itemByVal(
							env.nauczycielEnv.wybraneZadanie.typWyboruPytan);
					switch (env.nauczycielEnv.wybraneZadanie.trybSprawdzenia) {
						case Const.TYP_SPRAWDZENIA_NATYCHMIAST       : sprNatychmiast.selected = true; break;
						case Const.TYP_SPRAWDZENIA_NATYCHMIAST_WUMUS : sprNatychmiastWymus.selected = true; break;
						case Const.TYP_SPRAWDZENIA_PO_ZAKONCZENIU    : sprNaKoncu.selected = true; break; 
					}

					typZadania.enabled = env.nauczycielEnv.wybraneZadanie.id == '';
					wyborPytan_Changed();
				}
			}

			protected function zapiszZadanie_clickHandler(event:MouseEvent):void {
				var token:RpcToken = env.eduClient.zadanieService.zapiszZadanie(env.nauczycielEnv.wybraneZadanie);
				token.newResponder(zapiszZadanie_Handler, env.FaultHandler);
			}
			
			protected function zapiszZadanie_Handler(event:ResultEvent, token:ZadanieToken):void {
				env.nauczycielEnv.zapisz_Zadanie(event.result as Zadanie);
			}

			protected function zadaniaList_changeHandler(event:IndexChangeEvent):void {
				env.nauczycielEnv.wybraneZadanie = zadaniaList.selectedItem;
				wczytajZbioryPytan();
				initControls();
			}
			
			private function wczytajZbioryPytan():void {
				var token:RpcToken = env.eduClient.pytanieService.wczytajDostepneZbioryTypu(env.nauczycielEnv.wybraneZadanie.typZadania);
				token.newResponder(wczytajDostepneZbioryTypu_Handler, env.FaultHandler);
			}
			
			private function wczytajDostepneZbioryTypu_Handler(event:ResultEvent, token:RpcToken):void {
				env.nauczycielEnv.dostepneZbioryPytanTypu = event.result as ArrayCollection;
			}

			protected function typZadania_changeHandler(event:IndexChangeEvent):void {
				env.nauczycielEnv.wybraneZadanie.typZadania = (typZadania.selectedItem as KonwerterItem).val;
				env.nauczycielEnv.wybraneZadanie.zadanie_zbioryPytan.removeAll();
				wczytajZbioryPytan();
			}

			protected function zadajZadanie_clickHandler(event:MouseEvent):void {
				var zadanie:Zadanie = zadaniaList.selectedItem as Zadanie;
				if (!zadanie) return;
				if (zadanie.id == '') {
					Alert.show("Zapisz zadanie zanim je zadasz");
					return;
				}
				
				var win:ZadajZadanieWindow = PopUpManager.createPopUp(this, ZadajZadanieWindow, true) as ZadajZadanieWindow;
				win.init(zadanie);
				env.openPopUp(win);
			}
			
			private function wyborPytan_Changed():void {
				env.nauczycielEnv.wybraneZadanie.typWyboruPytan = (wyborPytan.selectedItem as KonwerterItem).val;
				iloscPytan.enabled = (wyborPytan.selectedItem as KonwerterItem).val == Const.TYP_WYBORU_PYTAN_INTELIGENTNIE;
				env.nauczycielEnv.wybraneZadanie.iloscPytan = 0;
				if (!iloscPytan.enabled) {
					for each (var zzb:Zadanie_ZbiorPytan in env.nauczycielEnv.wybraneZadanie.zadanie_zbioryPytan)
						env.nauczycielEnv.wybraneZadanie.iloscPytan += zzb.iloscPytan;
				}
				var event:NauczycielEvent = new NauczycielEvent(NauczycielEvent.TYP_WYBORU_CHANGED);
				env.dispatchEvent(event);
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:List id='zadaniaList' left="0" top="0" width="180" bottom="0" 
			dataProvider="{env.nauczycielEnv.zadaniaList}"
			itemRenderer="pl.twerno.eduClient.panels.nauczyciel.renderers.ZadanieListRenderer"
			change="zadaniaList_changeHandler(event)"/>
	<s:Panel width="370" height="468" left="190" top="0" title="Zadanie" id='zadaniePanel'>
		<mx:Form left="0" top="0" right="0" bottom="0">
			<mx:FormItem label="Nazwa" width="100%">
				<s:TextInput width="100%" text="@{env.nauczycielEnv.wybraneZadanie.nazwa}"/>
			</mx:FormItem>
			<mx:FormItem label="Typ zadania" width="100%">
				<s:DropDownList id='typZadania' width="100%" dataProvider="{Const.TYP_ZADANIA_KONWERTER}"
								change="typZadania_changeHandler(event)"/>
			</mx:FormItem>
			<mx:FormItem width="100%">
				<s:CheckBox label="Obowiązkowe" width="100%" height="100%"
							selected="@{env.nauczycielEnv.wybraneZadanie.obowiazkowe}"/>
			</mx:FormItem>
			<mx:FormItem label="Minimalny wynik" width="100%">
				<s:NumericStepper id='minimalnyWynik' value="@{env.nauczycielEnv.wybraneZadanie.minimalnyWynik}" 
					width="100%" minimum="0" maximum="{iloscPytan.value}" stepSize="1"/>
			</mx:FormItem>
			<mx:FormItem label="Dostępne od" width="100%">
				<mx:DateField width="100%" selectedDate="@{env.nauczycielEnv.wybraneZadanie.dtOd}"/>
			</mx:FormItem>
			<mx:FormItem label="Dostępne do" width="100%">
				<mx:DateField width="100%" selectedDate="@{env.nauczycielEnv.wybraneZadanie.dtDo}"/>
			</mx:FormItem>
			<mx:FormItem width="100%">
				<mx:HRule height="100%" width="100%"/>
			</mx:FormItem>
			<mx:FormItem label="Ilość pytań" width="100%">
				<s:NumericStepper id='iloscPytan' width="100%" 
								  stepSize="1" value="@{env.nauczycielEnv.wybraneZadanie.iloscPytan}" 
								  minimum="0" maximum="{env.nauczycielEnv.maxIloscPytan}"/>
			</mx:FormItem>
			<mx:FormItem label="Wybór pytań" width="100%">
				<s:DropDownList id='wyborPytan' width="100%" dataProvider="{Const.TYP_WYBORU_KONWERTER}"
								change="wyborPytan_Changed()"/>
			</mx:FormItem>
			<mx:FormItem label="Limit czasowy" width="100%">
				<s:NumericStepper width="100%" stepSize="1" value="@{env.nauczycielEnv.wybraneZadanie.limitCzasowy}" minimum="0" maximum="999"/>
			</mx:FormItem>
			<mx:FormItem width="100%">
				<mx:HRule height="100%" width="100%"/>
			</mx:FormItem>
			<s:RadioButton id="sprNatychmiast" label="Sprawdz natychmiast" width="100%" height="21" 
						   change="{env.nauczycielEnv.wybraneZadanie.trybSprawdzenia = Const.TYP_SPRAWDZENIA_NATYCHMIAST}"/>
			<s:RadioButton id="sprNaKoncu"     label="Sprawdz po zakończeniu" width="100%" height="21"
						   change="{env.nauczycielEnv.wybraneZadanie.trybSprawdzenia = Const.TYP_SPRAWDZENIA_PO_ZAKONCZENIU}"/>
			<s:RadioButton id="sprNatychmiastWymus" label="Sprawdz natychmiast i wymagaj prawidłowej odpowiedzi" width="100%" height="21"
						   change="{env.nauczycielEnv.wybraneZadanie.trybSprawdzenia = Const.TYP_SPRAWDZENIA_NATYCHMIAST_WUMUS}"/>
			<mx:FormItem width="100%">
				<s:Button label="Zapisz zmiany" skinClass="pl.twerno.commLib.skins.button.SaveButtonSkin" width="152" 
						  click="zapiszZadanie_clickHandler(event)"/>
			</mx:FormItem>
		</mx:Form>
	</s:Panel>
	<s:Button x="188" y="476" label="Dodaj zadanie" 
			  skinClass="pl.twerno.commLib.skins.button.AddButtonSkin" width="144" 
			  click="dodajZadanie_clickHandler(event)"/>
	<s:Button x="188" y="505" label="Usuń zadanie" 
			  skinClass="pl.twerno.commLib.skins.button.DeleteButtonSkin" width="144"/>
	<s:Button x="188" y="534" label="Zadaj zadanie" 
			  skinClass="pl.twerno.commLib.skins.button.HouseButtonSkin" width="144"
			  click="zadajZadanie_clickHandler(event)"/>
	
	<s:Panel right="0" top="0" left="570" title="Zbiory pytań" height="48%">
		<s:List top="5" left="5" right="5" bottom="5" 
				dataProvider="{env.nauczycielEnv.dostepneZbioryPytanTypu}"
				itemRenderer="pl.twerno.eduClient.panels.nauczyciel.renderers.WybierzZbiorPytanRenderer" id="zbioryList"/>
	</s:Panel>
	<s:Panel height="50%" bottom="0" left="570" right="0" title="Wyróżnienia" id='zasadyPanel'>
		<s:Scroller top="5" left="5" bottom="5" right="5">
			<s:Group top="0" left="0" right="0" bottom="0">
				<s:layout>
					<s:VerticalLayout/>
				</s:layout>
				<s:Group minHeight="25" width="100%">
					<mx:Image verticalCenter="0" width="16" height="16" left="5" source="{Images.get().medal_goldImg}"/>
					<s:Label verticalCenter="2" left="25" width="50" text="Punkty" />
					<s:NumericStepper id='punktyGold' value="@{env.nauczycielEnv.wybraneZadanie.zasady.punkty_gold}" 
									  left="75" top="1" width="100%" 
									  minimum="{punktySilver.value}" 
									  maximum="{env.nauczycielEnv.wybraneZadanie.iloscPytan}" stepSize="1"/>
				</s:Group>
				<s:Group minHeight="25" width="100%">
					<mx:Image verticalCenter="0" width="16" height="16" left="5" source="{Images.get().medal_silverImg}"/>
					<s:Label verticalCenter="2" left="25" width="50" text="Punkty" />
					<s:NumericStepper id='punktySilver' value="@{env.nauczycielEnv.wybraneZadanie.zasady.punkty_silver}" 
									  left="75" top="1" width="100%" 
									  minimum="{punktyBronze.value}" 
									  maximum="{punktyGold.value}"
									  stepSize="1"/>
				</s:Group>
				<s:Group minHeight="25" width="100%">
					<mx:Image verticalCenter="0" width="16" height="16" left="5" source="{Images.get().medal_bronzeImg}"/>
					<s:Label verticalCenter="2" left="25" width="50" text="Punkty" />
					<s:NumericStepper id='punktyBronze' value="@{env.nauczycielEnv.wybraneZadanie.zasady.punkty_bronze}" 
									  left="75" top="1" width="100%" 
									  minimum="0" 
									  maximum="{punktySilver.value}" stepSize="1"/>
				</s:Group>
				<s:Group minHeight="25" width="100%">
					<mx:Image verticalCenter="0" width="16" height="16" left="5" source="{Images.get().medal_goldImg}"/>
					<s:Label verticalCenter="2" left="25" width="50" text="Czas" />
					<s:NumericStepper id='czasGold' value="@{env.nauczycielEnv.wybraneZadanie.zasady.czas_gold}" 
									  left="75" top="1" width="100%" minimum="{czasSilver.value}" 
									  maximum="{env.nauczycielEnv.wybraneZadanie.limitCzasowy}" stepSize="1"/>
				</s:Group>
					<s:Group minHeight="25" width="100%">
						<mx:Image verticalCenter="0" width="16" height="16" left="5" source="{Images.get().medal_silverImg}"/>
						<s:Label verticalCenter="2" left="25" width="50" text="Czas" />
						<s:NumericStepper id='czasSilver' value="@{env.nauczycielEnv.wybraneZadanie.zasady.czas_silver}" 
										  left="75" top="1" width="100%" minimum="{czasBronze.value}" 
										  maximum="{czasGold.value}" stepSize="1"/>
				</s:Group>
				<s:Group minHeight="25" width="100%">
					<mx:Image verticalCenter="0" width="16" height="16" left="5" source="{Images.get().medal_bronzeImg}"/>
					<s:Label verticalCenter="2" left="25" width="50" text="Czas" />
					<s:NumericStepper id='czasBronze' value="@{env.nauczycielEnv.wybraneZadanie.zasady.czas_bronze}" 
									  left="75" top="1" width="100%" minimum="0" 
									  maximum="{czasSilver.value}" stepSize="1"/>
				</s:Group>
			</s:Group>
		</s:Scroller>
	</s:Panel>
</panels:AbstractPanel>
