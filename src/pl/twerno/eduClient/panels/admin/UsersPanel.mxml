<?xml version="1.0" encoding="utf-8"?>
<panels:AbstractPanel xmlns:fx="http://ns.adobe.com/mxml/2009" 
					  xmlns:s="library://ns.adobe.com/flex/spark" 
					  xmlns:mx="library://ns.adobe.com/flex/mx" 
					  xmlns:panels="pl.twerno.eduClient.panels.*" 
					  width="724" height="480">
	<fx:Script>
		<![CDATA[
			import mx.controls.Alert;
			import mx.events.CollectionEvent;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.events.ValidationResultEvent;
			import mx.rpc.events.ResultEvent;
			
			import net.twerno.eduClient.RO.user.Account;
			import net.twerno.eduClient.RO.user.Grupa;
			import net.twerno.eduClient.consts.Const;
			import net.twerno.eduClient.responders.RpcResponder;
			import net.twerno.eduClient.rpc.tokens.AccountToken;
			import net.twerno.eduClient.rpc.tokens.RpcToken;
			
			import pl.twerno.commLib.helpers.StringHelper;
			import pl.twerno.commLib.skins.button.AddButtonSkin;
			import pl.twerno.eduClient.common.Env.Env;
			import pl.twerno.eduClient.common.renderers.TakNieRenderer;
			import pl.twerno.eduClient.panels.admin.renderers.GrupyRenderer;
			import pl.twerno.eduClient.panels.admin.renderers.NalezyDoGrupyRenderer;

			protected function findAllAccoundsResult(data:ResultEvent, token:RpcToken):void {
				env.adminEnv.accounts.disableAutoUpdate();
				env.adminEnv.accounts.removeAll();
				for each (var account:Account in data.result)
					env.adminEnv.accounts.addItem(account);
				env.adminEnv.accounts.enableAutoUpdate();
				datagrid1_changeHandler(null);
			}

			protected function findAllGrupsResult(data:ResultEvent, token:RpcToken):void {
				env.adminEnv.grupy.disableAutoUpdate();
				env.adminEnv.grupy.removeAll();
				for each (var grupa:Grupa in data.result)
					env.adminEnv.grupy.addItem(grupa);
				env.adminEnv.grupy.enableAutoUpdate();
			}

			public override function init():void {
				var token:RpcToken = env.eduClient.userService.findAllAccounds();
				token.addResponder(new RpcResponder(findAllAccoundsResult, env.FaultHandler));
				var token2:RpcToken = env.eduClient.userService.findAllGroups();
				token2.addResponder(new RpcResponder(findAllGrupsResult, env.FaultHandler));
				usersGrid.selectedIndex = env.adminEnv.selectedAccountIdx;
				datagrid1_changeHandler(null);
			}

			protected function datagrid1_changeHandler(event:ListEvent):void {
				var tnEnabled:Boolean = usersGrid.selectedItem != null;
				
				if (tnEnabled)
					env.adminEnv.selectedUser  = (usersGrid.selectedItem as Account).kopia();
				else
					env.adminEnv.selectedUser = null;
				
				env.adminEnv.selectedAccountIdx = usersGrid.selectedIndex;

				noweHaslo.enabled          = tnEnabled;
				aktywneChBox.enabled       = tnEnabled;
				tnAdminChBox.enabled       = tnEnabled;
				tnUczenChBox.enabled       = tnEnabled;
				tnNauczycielChBox.enabled  = tnEnabled;
				zatwierdzZmianyBtn.enabled = tnEnabled;
				zapiszNoweHasloBtn.enabled = tnEnabled;
			}

			protected function zatwierdzZmianyBtn_clickHandler(event:MouseEvent):void {
				var token:RpcToken = env.eduClient.userService.zapisAccount(env.adminEnv.selectedUser as Account);
				token.addResponder(new RpcResponder(after_zapiszAccount, env.FaultHandler));
			}
			
			protected function after_zapiszAccount(data:ResultEvent, token:AccountToken):void {
				env.adminEnv.accounts.disableAutoUpdate();
				for each (var account:Account in env.adminEnv.accounts)
				if (account.id == env.adminEnv.selectedUser.id)
					account.przepiszZ(env.adminEnv.selectedUser);
				env.adminEnv.accounts.enableAutoUpdate();
				env.adminEnv.accounts.dispatchEvent(new CollectionEvent(CollectionEvent.COLLECTION_CHANGE));
			}

			protected function tnUczenChBox_changeHandler(event:Event):void {
				if ((event.currentTarget as CheckBox).selected)
					env.adminEnv.selectedUser.dodajRole(Const.ROLE_UCZEN);
				else
					env.adminEnv.selectedUser.usunRole(Const.ROLE_UCZEN);
			}

			protected function tnAdminChBox_changeHandler(event:Event):void {
				if ((event.currentTarget as CheckBox).selected)
					env.adminEnv.selectedUser.dodajRole(Const.ROLE_ADMIN);
				else
					env.adminEnv.selectedUser.usunRole(Const.ROLE_ADMIN);
			}

			protected function tnNauczycielChBox_changeHandler(event:Event):void {
				if ((event.currentTarget as CheckBox).selected)
					env.adminEnv.selectedUser.dodajRole(Const.ROLE_NAUCZYCIEL);
				else
					env.adminEnv.selectedUser.usunRole(Const.ROLE_NAUCZYCIEL);
			}

			protected function zapiszNoweHasloBtn_clickHandler(event:MouseEvent):void {
				if (noweHasloValidator.validate().type == ValidationResultEvent.INVALID ||
					env.adminEnv.selectedUser == null)
					return;

				var token:RpcToken = env.eduClient.userService.zmienHaslo(env.adminEnv.selectedUser.username, noweHaslo.text);
				token.addResponder(new RpcResponder(after_zmienHaslo, env.FaultHandler));
			}

			protected function after_zmienHaslo(data:ResultEvent, token:RpcToken):void {
				Alert.show("Hasło zostało zmienione");
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<mx:StringValidator source="{noweHaslo}" property="text" id="noweHasloValidator"
							minLength="3" maxLength="30"
							tooShortError="Hasło jest za krótkie." tooLongError="Hasło jest za długie"
							required="true" requiredFieldError="Wpisz hasło."/>
	</fx:Declarations>
	
	<mx:DataGrid id="usersGrid" left="0" top="0" bottom="0"
				 dataProvider="{env.adminEnv.accounts}" change="datagrid1_changeHandler(event)" right="270"
				 variableRowHeight="true">
		<mx:columns>
			<mx:DataGridColumn width="150" headerText="Imie" dataField="username" editable="false"
							   itemRenderer="pl.twerno.eduClient.panels.admin.renderers.UsernameRenderer"/>
			<mx:DataGridColumn width="100" headerText="Rola" dataField="roles" editable="false"
							   itemRenderer="pl.twerno.eduClient.panels.admin.renderers.RoleRenderer" wordWrap="true"/>
			<mx:DataGridColumn width="100" headerText="Grupy" dataField="grupy" editable="false"
							   itemRenderer="pl.twerno.eduClient.panels.admin.renderers.GrupyRenderer" wordWrap="true"/>
			<mx:DataGridColumn width="45" headerText="Aktywny" dataField="enabled" editable="false"
							   itemRenderer="pl.twerno.eduClient.common.renderers.TakNieRenderer"/>
		</mx:columns>
	</mx:DataGrid>
	<s:Panel width="260" title="Szczegóły użytkownika" top="0" bottom="0" right="0">

		<mx:Form top="0" left="0" right="0" bottom="0">
			<mx:FormItem label="Nazwa" width="100%">
				<s:TextInput width="100%" enabled="false" text="{env.adminEnv.selectedUser.username}"/>
			</mx:FormItem>
			<mx:FormItem label="Hasło" width="100%">
				<s:TextInput width="100%" id="noweHaslo"/>
			</mx:FormItem>
			<mx:FormItem width="100%">
				<s:Button label="Zapisz nowe hasło" skinClass="pl.twerno.commLib.skins.button.SaveButtonSkin" id="zapiszNoweHasloBtn" click="zapiszNoweHasloBtn_clickHandler(event)"/>
			</mx:FormItem>
			<mx:FormItem width="100%">
				<mx:HRule width="100%" verticalCenter="0" height="100%"/>
			</mx:FormItem>
			<mx:FormItem width="100%">
				<s:CheckBox label="Konto aktywne" width="100%" selected="@{env.adminEnv.selectedUser.enabled}" id="aktywneChBox"/>
			</mx:FormItem>
			<mx:FormItem width="100%" label="Role">
				<s:CheckBox label="Uczeń"         enabled="true" selected="{env.adminEnv.selectedUser.hasRole(Const.ROLE_UCZEN)}"      id="tnUczenChBox"      change="tnUczenChBox_changeHandler(event)"/>
				<s:CheckBox label="Nauczyciel"    enabled="true" selected="{env.adminEnv.selectedUser.hasRole(Const.ROLE_NAUCZYCIEL)}" id="tnNauczycielChBox" change="tnNauczycielChBox_changeHandler(event)"/>
				<s:CheckBox label="Administrator" enabled="true" selected="{env.adminEnv.selectedUser.hasRole(Const.ROLE_ADMIN)}"      id="tnAdminChBox"      change="tnAdminChBox_changeHandler(event)"/>	
			</mx:FormItem>
			<mx:FormItem label="Grupy" width="100%" height="100%">
				<s:List id='grupyList' width="100%" height="100%" 
						dataProvider="{env.adminEnv.grupy}"
						itemRenderer="pl.twerno.eduClient.panels.admin.renderers.NalezyDoGrupyRenderer"/>
			</mx:FormItem>
			<mx:FormItem width="100%">
				<s:Button label="Zatwierdź zmiany" width="135" skinClass="pl.twerno.commLib.skins.button.AcceptButtonSkin" id="zatwierdzZmianyBtn" click="zatwierdzZmianyBtn_clickHandler(event)"/>
			</mx:FormItem>
		</mx:Form>
	</s:Panel>
</panels:AbstractPanel>
