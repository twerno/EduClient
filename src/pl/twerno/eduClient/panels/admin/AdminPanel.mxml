<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 width="630" height="398" 
		 creationComplete="group1_creationCompleteHandler(event)">
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.rpc.AsyncToken;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;

			import net.twerno.eduClient.RO.Account;
			import net.twerno.eduClient.RO.Grupa;
			import net.twerno.eduClient.responders.FunctResponder;
			import net.twerno.eduClient.responders.RpcResponder;
			import net.twerno.eduClient.rpc.tokens.GrupaRpcToken;
			import net.twerno.eduClient.rpc.tokens.GrupaUserRpcToken;
			import net.twerno.eduClient.rpc.tokens.RpcToken;

			import pl.twerno.commLib.helpers.CollectionHelper;
			import pl.twerno.commLib.helpers.StringHelper;
			import pl.twerno.eduClient.common.Env.Env;
			import pl.twerno.eduClient.common.Env.RPCErrorHandler;
			import pl.twerno.eduClient.common.renderers.CheckboxRenderer;

			private var env:Env = Env.env;

			[Bindable]
			private var selectedUser:Account;

			[Bindable]
			private var accounts : ArrayCollection = new ArrayCollection; 

			[Bindable]
			private var grupy : ArrayCollection = new ArrayCollection();

			protected function findAllAccoundsResult(data:ResultEvent, token:RpcToken):void {
				accounts.disableAutoUpdate();
				accounts.removeAll();
				for each (var account:Account in data.result)
					accounts.addItem(account);
				accounts.enableAutoUpdate();
				datagrid1_changeHandler(null);
			}
			
			protected function findAllGrupsResult(data:ResultEvent, token:RpcToken):void {
				grupy.disableAutoUpdate();
				grupy.removeAll();
				for each (var grupa:Grupa in data.result)
					grupy.addItem(grupa);
				grupy.enableAutoUpdate();
			}

			protected function group1_creationCompleteHandler(event:FlexEvent):void {
				init();
			}

			protected function init():void {
				var token:RpcToken = env.eduClient.userService.findAllAccounds();
				token.addResponder(new RpcResponder(findAllAccoundsResult, env.FaultHandler));
				var token2:RpcToken = env.eduClient.userService.findAllGroups();
				token2.addResponder(new RpcResponder(findAllGrupsResult, env.FaultHandler));
			}

			protected function usunZGrupy_clickHandler(event:MouseEvent):void {
				if (grupyList.selectedItem == null)
					return;

				var token:RpcToken = env.eduClient.userService.usunZGrupy(selectedUser.username, grupyList.selectedItem.nazwa);
				token.addResponder(new RpcResponder(userUsunietyZGrupyHandled, env.FaultHandler));
			}
			
			protected function userUsunietyZGrupyHandled(data:ResultEvent, token:GrupaUserRpcToken):void {
				accounts.disableAutoUpdate();
				for each (var account:Account in accounts)
				if (account.username == token.username)
					for (var i:int = account.grupy.length; i >= 0 ; i--)
						if ((account.grupy.getItemAt(i) as Grupa).nazwa == token.grupaName)
							account.grupy.removeItemAt(i);
				accounts.enableAutoUpdate();
			}

			// dodaj do grupy
			protected function dodajDoGrupy_clickHandler(event:MouseEvent):void {
				if (selectedUser == null ||
					wyborGrupyDrop.selectedItem == null || 
					selectedUser.hasGroup(wyborGrupyDrop.selectedItem.nazwa))
					return;
				
				var token:RpcToken = env.eduClient.userService.dodajDoGrupy(selectedUser.username, wyborGrupyDrop.selectedItem.nazwa);
				token.addResponder(new RpcResponder(userDodanyDoGrupyHandled, env.FaultHandler));
			}

			protected function userDodanyDoGrupyHandled(data:ResultEvent, token:GrupaUserRpcToken):void {
				accounts.disableAutoUpdate();
				for each (var account:Account in accounts)
					if (account.username == token.username)
						account.grupy.addItem(Grupa.get(token.grupaName));
				accounts.enableAutoUpdate();
			}
			
			protected function dodajGrupe_clickHandler(event:MouseEvent):void {
				if (StringHelper.isEmpty(nowaGrupaName.text)) return; 
				if (CollectionHelper.arayCollectionContains(grupy, 'nazwa', nowaGrupaName.text)) {
					Alert.show("Grupa o nazwie \"" +nowaGrupaName.text +"\" już istnieje.");
					return;
				}

				var token:RpcToken = env.eduClient.userService.dodajGrupe(nowaGrupaName.text);
				token.addResponder(new RpcResponder(grupaDodanaHandled, env.FaultHandler));
			}
			
			protected function grupaDodanaHandled(data:ResultEvent, token:GrupaRpcToken):void {
				// grupa została dodana
				grupy.addItem(Grupa.get(token.grupaName));	
			}

			protected function usunGrupe_clickHandler(event:MouseEvent):void {
				if (grupyList.selectedItem == null) return;
				var token:RpcToken = env.eduClient.userService.usunGrupe(nowaGrupaName.text);
				token.addResponder(new RpcResponder(null, env.FaultHandler));
			}
			
			protected function grupaUsunietaHandler(data:ResultEvent, token:GrupaRpcToken):void {
				// usuń grupę
				grupy.disableAutoUpdate();
				for (var i:int = grupy.length; i >= 0 ; i--)
					if ((grupy.getItemAt(i) as Grupa).nazwa == token.grupaName)
						grupy.removeItemAt(i);
				grupy.enableAutoUpdate();
			}

			protected function datagrid1_changeHandler(event:ListEvent):void {
				selectedUser = usersGrid.selectedItem as Account;
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		
	</fx:Declarations>

	<mx:TabNavigator x="0" y="0" width="100%" height="100%">
		<s:NavigatorContent label="Użytkownicy" width="100%" height="100%">
			<mx:DataGrid id="usersGrid" left="0" top="0" bottom="10" dataProvider="{accounts}" width="444" change="datagrid1_changeHandler(event)">
				<mx:columns>
					<mx:DataGridColumn width="150" headerText="Imie" dataField="username" editable="false"/>
					<mx:DataGridColumn width="100" headerText="Rola" dataField="roles" editable="false"
									   itemRenderer="pl.twerno.eduClient.common.renderers.RoleRenderer"/>
					<mx:DataGridColumn width="45" headerText="Aktywny" dataField="enabled" editable="false"
									   itemRenderer="pl.twerno.eduClient.common.renderers.CheckboxRenderer"/>
				</mx:columns>
			</mx:DataGrid>
			<s:Panel x="449" y="1" width="179" height="354" title="Grupy">
				<s:List x="10" y="10" width="158" height="214" dataProvider="{selectedUser.grupy}"/>
				<s:Button x="10" y="232" label="Usuń z grupy" click="usunZGrupy_clickHandler(event)"/>
				<s:DropDownList id='wyborGrupyDrop' x="10" y="261" width="157" dataProvider="{grupy}"/>
				<s:Button x="10" y="290" label="Dodaj do grupy" click="dodajDoGrupy_clickHandler(event)"/>
			</s:Panel>
		</s:NavigatorContent>
		<s:NavigatorContent label="Grupy" width="100%" height="100%">
			<s:List id="grupyList" x="10" top="10" width="190" bottom="35" dataProvider="{grupy}"/>
			<s:Button x="210" bottom="10" label="Dodaj grupę" click="dodajGrupe_clickHandler(event)"/>
			<s:Button x="10" bottom="10" label="Usuń grupę" click="usunGrupe_clickHandler(event)"/>
			<s:TextInput x="210" id="nowaGrupaName" bottom="35"/>
		</s:NavigatorContent>
	</mx:TabNavigator>
</s:Group>
