<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   width="950" height="600" 
			   currentState="PreStart"
			   verticalCenter="0"
			   horizontalCenter="0"
			   xmlns:Zadanie="pl.twerno.eduClient.Zadanie.*">
	<fx:Script>
		<![CDATA[
			import flash.events.TimerEvent;
			import flash.utils.Timer;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import net.twerno.eduClient.RO.pytanie.PytanieZamkniete;
			import net.twerno.eduClient.RO.sesja.SesjaOtwartaRO;
			import net.twerno.eduClient.RO.zadanie.ZadaneZadanie_Zasady;
			import net.twerno.eduClient.RO.zadanie.Zadanie;
			import net.twerno.eduClient.consts.Const;
			import net.twerno.eduClient.rpc.tokens.RpcToken;
			
			import pl.twerno.commLib.Images;
			import pl.twerno.eduClient.Env.Env;
			import pl.twerno.eduClient.UserEnv.UczenEnv;

			[Bindable]
			protected var env:Env = Env.get;

			[Bindable]
			protected var uczenEnv:UczenEnv = Env.get.uczenEnv;

			[Bindable]
			protected var listaPytan:ArrayCollection = new ArrayCollection();

			protected var timer:Timer = new Timer(1000); 

			protected var listaPytanBuilder:AsyncListaPytanBuilder = new AsyncListaPytanBuilder();

			protected var jestLimitCzasowy:Boolean = false;

			protected var czasRozwiazania:int = 0;

			protected var currentPytanieIdx:int = -1;

			protected var currentPytanie:PytanieZamkniete;

			protected var zadaniePlayer:IZadaniePlayer;

			protected var liczbaPodejsc:int = 0;

			[Bindable]
			protected var wynik:int;
			
			[Bindable]
			private var clockGroupVisible:Boolean = true;

			[Bindable]
			private var wynikGroupVisible:Boolean = true;
			
			private var alert:Alert;
			
			private var zapisujeOdpowiedz:Boolean = false;
			
			public var callBackFunct:Function = null;

			protected function closeHandler(event:CloseEvent):void {
				if (currentState == 'wynikiState' || currentState == 'PreStart') {
					zamknij();
					
				} else {
					alert = Alert.show("Czy przerwać zadanie?", 
						"Przerwać zadanie?", Alert.YES | Alert.NO);
					alert.addEventListener(CloseEvent.CLOSE, alert_closeHandler);
				}
			}

			protected function alert_closeHandler(event:CloseEvent):void {
				alert.removeEventListener(CloseEvent.CLOSE, alert_closeHandler);
				if (event.detail == Alert.YES)
					pokazEkranWynikow();
			}

			public function init(sesjaOtwarta:SesjaOtwartaRO, zadaniePlayer:IZadaniePlayer):void {
				addEventListener(CloseEvent.CLOSE, closeHandler);
				listaPytanBuilder.addEventListener(ListaPytanEvent.UTWORZONA, listaPytanHandler);		
				timer.addEventListener(TimerEvent.TIMER, timerHandler);

				this.zadaniePlayer = zadaniePlayer;
				
				callBackFunct = Env.get.nauczycielEnv.zadanieCallback;
				
				czasRozwiazania = 0;
				uczenEnv.zamknijSesje();
				uczenEnv.sesjaOtwarta = sesjaOtwarta;
				title = uczenEnv.sesjaOtwarta.zadanie.nazwa;
				listaPytanBuilder.budujListePytan(sesjaOtwarta);

				jestLimitCzasowy  = sesjaOtwarta.zadanie.limitCzasowy != 0;
				clockGroupVisible = jestLimitCzasowy;

				wynikGroupVisible = 
					(sesjaOtwarta.zadanie.trybSprawdzenia == Const.TYP_SPRAWDZENIA_NATYCHMIAST) ||
					(sesjaOtwarta.zadanie.trybSprawdzenia == Const.TYP_SPRAWDZENIA_NATYCHMIAST_WUMUS);
				wypelnijZasadyPanel();
			}

			protected function listaPytanHandler(event:ListaPytanEvent):void {
				listaPytan = event.result;
				zadaniePlayer.init(this, env.uczenEnv.sesjaOtwarta, listaPytan);
				startButton.enabled = true;
			}

			public function otworz():void {
				env.openPopUp(this);
			}

			public function zamknij():void {
				timer.stop();
				removeEventListener(CloseEvent.CLOSE, closeHandler);
				removeEventListener(ListaPytanEvent.UTWORZONA, listaPytanHandler);		
				timer.removeEventListener(TimerEvent.TIMER, timerHandler);
				listaPytanBuilder.removeEventListener(ListaPytanEvent.UTWORZONA, listaPytanHandler);
				
				if (callBackFunct != null)
					callBackFunct();
				
				env.zamknijPopUp();
			}

			protected function timerHandler(event:TimerEvent):void {
				czasRozwiazania += 1;
				
				if (!jestLimitCzasowy)
					return;
				
				var pozostaloCzasu: int = uczenEnv.sesjaOtwarta.zadanie.limitCzasowy -czasRozwiazania;
				
				clockLabel.text = pozostaloCzasu.toString();
				
				if (pozostaloCzasu <= 0)
					pokazEkranWynikow();
			}
		
			public function pause():void {
				timer.stop();
			}

			public function resume():void {
				timer.start();
			}

			private function dodajPunkty(pytanie:PytanieZamkniete, poprawnaOdpowiedz:Boolean):void {
				if (liczbaPodejsc == 0 && poprawnaOdpowiedz)
					wynik += 1;
				else	
					liczbaPodejsc += 1;
			}

			public function start():void {
				currentState = 'zadanieState';
				zadaniePlayer.top    = 0;
				zadaniePlayer.left   = 0;
				zadaniePlayer.right  = 0;
				zadaniePlayer.bottom = 0;
				contentPlayerGroup.addElement(zadaniePlayer);
				timerHandler(null);
				timer.start();
				wynik = 0;
				wczytajPytanie(0);
			}
			
			public function nastepnePytanie():void {
				if (zapisujeOdpowiedz) return;
				
				try {
//					pause();
					var poprawnaOdpowiedz:Boolean = zadaniePlayer.sprawdz();
					dodajPunkty(currentPytanie, poprawnaOdpowiedz);
					if (!poprawnaOdpowiedz &&
						uczenEnv.sesjaOtwarta.zadanie.trybSprawdzenia == Const.TYP_SPRAWDZENIA_NATYCHMIAST_WUMUS)
						return;

					
					zapisujeOdpowiedz = true;
					var token:RpcToken = env.eduClient
						.sesjaService
						.zapiszOdpowiedz(
							uczenEnv.sesjaOtwarta.sesjaId,
							currentPytanie.id,
							poprawnaOdpowiedz,
							liczbaPodejsc);
					
					token.newResponder(zapiszOdpowiedzHandler, zapiszOdpowiedzFault);
				} catch (e:Error) {
					resume();
					zapisujeOdpowiedz = false;
					throw e;
				}
			}
			
			private function zapiszOdpowiedzHandler(event:ResultEvent, token:RpcToken):void {
				zapisujeOdpowiedz = false;
				wczytajPytanie(currentPytanieIdx +1);
			}
			
			private function zapiszOdpowiedzFault(fault:FaultEvent, token:RpcToken):void {
				zapisujeOdpowiedz = false;
//				resume();
				env.FaultHandler(fault, token);
			}

			protected function wczytajPytanie(idx:int):void {
				liczbaPodejsc = 0;
				if (idx >= listaPytan.length) {
					pokazEkranWynikow();
				} else {
					currentPytanieIdx = idx;
					currentPytanie    = listaPytan.getItemAt(idx) as PytanieZamkniete;
					posostaloLabel.text = (listaPytan.length -currentPytanieIdx).toString();
					zadaniePlayer.initPytanie(currentPytanie);
//					resume();
				}
			}

			public function pokazEkranWynikow():void {
				timer.stop();
				currentState = 'wynikiState';

				var sesja:SesjaOtwartaRO = env.uczenEnv.sesjaOtwarta;
				
				var tnWynik:Boolean = wynik >= sesja.zadanie.minimalnyWynik;
				var tnCzas:Boolean  = czasRozwiazania <= sesja.zadanie.limitCzasowy;
				
				punktyRuleLabel.zaznacz( tnWynik );
				czasRuleLabel.zaznacz( tnWynik && tnCzas );
				bezbledneRozwiazanieLabel.zaznacz( wynik == listaPytan.length );

				czasRule_bronzeLabel.zaznacz( tnWynik && czasRozwiazania <= sesja.zadanie.zasady.czas_bronze);
				czasRule_silverLabel.zaznacz( tnWynik && czasRozwiazania <= sesja.zadanie.zasady.czas_silver);
				czasRule_goldLabel.zaznacz(   tnWynik && czasRozwiazania <= sesja.zadanie.zasady.czas_gold);

				punktyRule_bronzeLabel.zaznacz( tnCzas && wynik >= sesja.zadanie.zasady.punkty_bronze);
				punktyRule_silverLabel.zaznacz( tnCzas && wynik >= sesja.zadanie.zasady.punkty_silver); 
				punktyRule_goldLabel.zaznacz(   tnCzas && wynik >= sesja.zadanie.zasady.punkty_gold);

				uczenEnv.zamknijSesje();
			}
			
			protected function wypelnijZasadyPanel():void {
				var sesja:SesjaOtwartaRO = env.uczenEnv.sesjaOtwarta;

				punktyRuleLabel.text = 'Musisz zdobyć ' +sesja.zadanie.minimalnyWynik +' punktów.';

				if (sesja.zadanie.limitCzasowy == 0)
					czasRuleLabel.text = 'Brak ograniczenia czasu.';
				else
					czasRuleLabel.text = 'Musisz ukończyć zadanie w czasie ' +sesja.zadanie.limitCzasowy +'s.';

				wpiszCzas(czasRule_bronzeLabel, sesja.zadanie.zasady.czas_bronze);
				wpiszCzas(czasRule_silverLabel, sesja.zadanie.zasady.czas_silver);
				wpiszCzas(czasRule_goldLabel,   sesja.zadanie.zasady.czas_gold);
				
				wpiszPunkty(punktyRule_bronzeLabel, sesja.zadanie.zasady.punkty_bronze);
				wpiszPunkty(punktyRule_silverLabel, sesja.zadanie.zasady.punkty_silver);
				wpiszPunkty(punktyRule_goldLabel,   sesja.zadanie.zasady.punkty_gold);
			}
			
			private function wpiszCzas(info:ZasadyInfo, czas:int):void {
				if (czas == 0) {
//					this.removeElement(info);
					info.visible = false;
				}
				else
					info.text = 'Ukończ w czasie ' +czas +'s.';
			}
			
			private function wpiszPunkty(info:ZasadyInfo, punkty:int):void {
				if (punkty == 0) {
//					this.removeElement(info);
					info.visible = false;
				} else {
					info.text = 'Zdobądź przynajmniej ' +punkty;
					if (punkty == 1)
						info.text += ' punkt.';
					else if (punkty <= 4)
						info.text += ' punkty.';
					else
						info.text += ' punktów.';
				}
			}

		]]>
	</fx:Script>
	<s:states>
		<s:State name="zadanieState"/>
		<s:State name="PreStart"/>
		<s:State name="wynikiState"/>
	</s:states>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<mx:Image x="0" y="0" 
			  width="100%" height="100%" source="../assets/a_paisaje_boceto.jpg"/>
	<s:Group y="75" width="75" height="25" right="5" id="starGroup" includeIn="zadanieState" visible="{wynikGroupVisible}">
		<mx:Image width="16" height="16" source="{Images.get().starImg}" verticalCenter="-1" left="0"/>
		<s:Label text="{this.wynik}" fontSize="20" color="#6C9A0A" fontFamily="Arial" width="50" 
				 textAlign="left" id="starLabel" x="25" verticalCenter="1"/>
	</s:Group>
	<s:Group y="40" width="75" height="25" right="5" id="clockGroup" includeIn="zadanieState" visible="{clockGroupVisible}">
		<mx:Image width="16" height="16" source="{Images.get().clockImg}" verticalCenter="-1" left="0"/>
		<s:Label text="999" fontSize="20" color="#6C9A0A" fontFamily="Arial" textAlign="left" id="clockLabel" x="25" verticalCenter="1" width="50"/>
	</s:Group>
	<s:Group width="195" height="25" right="5" y="5" includeIn="zadanieState">
		<s:Label text="Pozostało pytań:" fontSize="18" fontFamily="Georgia" x="5" verticalCenter="1" width="135"/>
		<s:Label text="999" fontSize="20" color="#6C9A0A" fontFamily="Arial" width="50" textAlign="left" id="posostaloLabel" x="145" verticalCenter="2"/>
	</s:Group>
	<s:Label includeIn="PreStart,wynikiState" y="73" text="Zasady" fontSize="20" fontSize.PreStart="24" x.wynikiState="310" y.wynikiState="39" text.wynikiState="Wyniki" fontSize.wynikiState="24" right.PreStart="260"/>
	<s:Group id='rulesGroup' includeIn="PreStart,wynikiState" 
			 top="100" top.wynikiState="73"
			 horizontalCenter.wynikiState="0" 
			 top.PreStart="100" height.PreStart="457" right.PreStart="10" width="330">
		<s:layout>
			<s:VerticalLayout/>
		</s:layout>
		<Zadanie:ZasadyInfo 
			id='punktyRuleLabel' 
			text="Musisz zdobyć 20 punktów."
			image="{Images.get().starImg}"/>
		<Zadanie:ZasadyInfo 
			id='czasRuleLabel' 
			text="Musisz ukończyć zadanie w czasie 999s."
			image="{Images.get().clockImg}"/>
		<Zadanie:ZasadyInfo 
			id='bezbledneRozwiazanieLabel' 
			text="Ukończ bezbłędnie"
			image="{Images.get().controllerImg}"/>
		<Zadanie:ZasadyInfo 
			id='czasRule_bronzeLabel' 
			text="Musisz ukończyć zadanie w czasie 999s."
			image="{Images.get().medal_bronzeImg}"/>
		<Zadanie:ZasadyInfo 
			id='czasRule_silverLabel' 
			text="Musisz ukończyć zadanie w czasie 999s."
			image="{Images.get().medal_silverImg}"/>
		<Zadanie:ZasadyInfo 
			id='czasRule_goldLabel' 
			text="Musisz ukończyć zadanie w czasie 999s."
			image="{Images.get().medal_goldImg}"/>
		<Zadanie:ZasadyInfo 
			id='punktyRule_bronzeLabel' 
			text="Musisz ukończyć zadanie w czasie 999s."
			image="{Images.get().medal_bronzeImg}"/>
		<Zadanie:ZasadyInfo 
			id='punktyRule_silverLabel' 
			text="Musisz ukończyć zadanie w czasie 999s."
			image="{Images.get().medal_silverImg}"/>
		<Zadanie:ZasadyInfo 
			id='punktyRule_goldLabel' 
			text="Musisz ukończyć zadanie w czasie 999s."
			image="{Images.get().medal_goldImg}"/>
	</s:Group>
	<s:Group includeIn="zadanieState" y="76" width="600" height="400" 
			 horizontalCenter="0"
			 id='contentPlayerGroup'>
	</s:Group>
	<mx:Image includeIn="zadanieState,PreStart" 
			  source="../assets/go-next.png"
			  click.zadanieState="nastepnePytanie()" verticalCenter="0"
			  click.PreStart="start();"
			  id='startButton' enabled="true" enabled.PreStart="false"
			  verticalCenter.PreStart="0" x.zadanieState="823" horizontalCenter.PreStart="0"/>
	<s:Label includeIn="PreStart" x="186" y="273" text="Wciśnij aby rozpocząć" fontSize="24"/>
</s:TitleWindow>